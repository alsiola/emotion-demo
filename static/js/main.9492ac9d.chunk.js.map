{"version":3,"sources":["Theme.tsx","components/Page.tsx","components/Heading.tsx","global.tsx","components/QueryBlob.tsx","components/List.tsx","components/OnlyFancy.tsx","App.tsx","index.tsx"],"names":["Themes","styled","_styled","themes","default","name","primary","secondary","text","fancy","Themed","children","useState","theme","setTheme","onChange","e","currentTarget","value","Page","div","Heading","h1","props","underlined","GlobalStyles","styles","console","log","css","Square","List","ul","ListItem","li","Item","OnlyFancy","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9492ac9d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport _styled, { CreateStyled } from \"@emotion/styled\";\nimport { ThemeProvider } from \"emotion-theming\";\n\ninterface Theme {\n    name: Themes;\n    primary: string;\n    secondary: string;\n    text: string;\n}\n\nexport const styled = _styled as CreateStyled<Theme>;\n\nexport enum Themes {\n    default = \"default\",\n    fancy = \"fancy\"\n}\n\nconst themes: Record<Themes, Theme> = {\n    [Themes.default]: {\n        name: Themes.default,\n        primary: \"black\",\n        secondary: \"white\",\n        text: \"black\"\n    },\n    [Themes.fancy]: {\n        name: Themes.fancy,\n        primary: \"green\",\n        secondary: \"black\",\n        text: \"grey\"\n    }\n};\n\nexport const Themed: React.FC = ({ children }) => {\n    const [theme, setTheme] = useState<Themes>(Themes.default);\n\n    return (\n        <ThemeProvider theme={themes[theme]}>\n            Choose your theme:{\" \"}\n            <select onChange={e => setTheme(e.currentTarget.value as Themes)}>\n                <option value={Themes.default}>Default</option>\n                <option value={Themes.fancy}>Fancy</option>\n            </select>\n            {children}\n        </ThemeProvider>\n    );\n};\n","import { styled } from \"../Theme\";\n\nexport const Page = styled.div`\n    margin: 0 60px;\n`;\n","import { styled } from \"../Theme\";\n\ninterface HeadingProps {\n    underlined?: boolean;\n}\n\nexport const Heading = styled.h1<HeadingProps>`\n    font-size: 24px;\n    color: ${({ theme }) => theme.text};\n    text-decoration: ${props => (props.underlined ? \"underline\" : \"none\")};\n    padding: 10px;\n    background-color: ${({ theme }) => theme.secondary};\n`;\n","import React from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport { Themes } from \"./Theme\";\n\nexport const GlobalStyles = () => (\n    <Global\n        styles={theme => {\n            console.log(theme);\n            return css`\n                * {\n                    font-family: ${theme.name === Themes.fancy\n                        ? \"courier\"\n                        : \"sans-serif\"};\n                }\n\n                body {\n                    background: ${theme.name === Themes.fancy\n                        ? \"green\"\n                        : \"initial\"};\n                    padding: 10px;\n                    background-image: ${theme.name === Themes.fancy\n                        ? 'url(\"http://amazeballsarancini.com.au/wp-content/uploads/2018/07/amazeballs-logo@2x.png\")'\n                        : \"none\"};\n                    background-repeat: repeat-y;\n                    background-position-x: center;\n                    background-position-y: top;\n                }\n            `;\n        }}\n    />\n);\n","import { styled } from \"../Theme\";\n\nexport const Square = styled.div`\n    width: 50px;\n    height: 50px;\n    margin: 0 auto;\n\n    background: red;\n\n    @media (min-width: 800px) {\n        background: blue;\n    }\n\n    @media (min-width: 1200px) {\n        background: yellow;\n    }\n`;\n","import { styled, Themes } from \"../Theme\";\n\nexport const List: ReturnType<typeof styled.ul> & {\n    Item: typeof ListItem;\n} = styled.ul`\n    list-style-image: ${({ theme }) =>\n        theme.name === Themes.fancy\n            ? 'url(\"https://pm1.narvii.com/6985/629875a5dd26925cffaa7db05d27db58bb8b168ar1-1132-1698v2_128.jpg\")'\n            : \"none\"};\n` as any;\n\nconst ListItem = styled.li`\n    line-height: ${({ theme }) =>\n        theme.name === Themes.fancy ? \"128px\" : \"30px\"};\n`;\n\nList.Item = ListItem;\n","import { styled, Themes } from \"../Theme\";\n\nexport const OnlyFancy = styled.div`\n    display: ${({ theme }) => (theme.name === Themes.fancy ? \"block\" : \"none\")};\n`;\n","import React from \"react\";\nimport { Page } from \"./components/Page\";\nimport { Heading } from \"./components/Heading\";\nimport { GlobalStyles } from \"./global\";\nimport { Themed } from \"./Theme\";\nimport { Square } from \"./components/QueryBlob\";\nimport { List } from \"./components/List\";\nimport { OnlyFancy } from \"./components/OnlyFancy\";\n\nconst App: React.FC = () => {\n    return (\n        <Themed>\n            <GlobalStyles />\n            <Heading underlined>emotion</Heading>\n            <OnlyFancy>Heavy Breathing</OnlyFancy>\n            <Page>\n                <Heading>Developer Experience</Heading>\n                <List>\n                    <List.Item>Docs are excellent!</List.Item>\n                    <List.Item>\n                        VSCode plugin gives CSS auto-completion\n                    </List.Item>\n                    <List.Item>Simple theming (whitelabelling...)</List.Item>\n                </List>\n                <Heading>Type Support</Heading>\n                <List>\n                    <List.Item>\n                        Imperfect - available but requires some manual\n                        annotation\n                    </List.Item>\n                    <List.Item>\n                        Not written in TS, but types are library bundled\n                    </List.Item>\n                </List>\n                <Heading>Build Process</Heading>\n                <List>\n                    <List.Item>\n                        Babel plugin provides:\n                        <List>\n                            <List.Item>Minification</List.Item>\n                            <List.Item>Dead code elimination</List.Item>\n                            <List.Item>Source Maps</List.Item>\n                            <List.Item>Contextual Class Names</List.Item>\n                        </List>\n                    </List.Item>\n                    <List.Item>\n                        Bundle size\n                        <List>\n                            <List.Item>\n                                @emotion/core - 6.5kb min + gzip\n                            </List.Item>\n                            <List.Item>\n                                @emotion/styled - 4.6kb min + gzip\n                            </List.Item>\n                            <List.Item>\n                                emotion-theming - 1.5kb min + gzip\n                            </List.Item>\n                        </List>\n                    </List.Item>\n                </List>\n                <Heading>Maintainability</Heading>\n                <List>\n                    <List.Item>Hash-based classnames = no clashies</List.Item>\n                    <List.Item>\n                        Not written in TS, but types are library bundled\n                    </List.Item>\n                    <List.Item>Composable styles</List.Item>\n                </List>\n                <Heading>Application to Codebase</Heading>\n                <List>\n                    <List.Item>\n                        SCSS compatible - global variables would be replaced by\n                        interpolations from themes/props\n                    </List.Item>\n                    <List.Item>Full media query support</List.Item>\n                </List>\n                <Heading>Browser Support</Heading>\n                <List>\n                    <List.Item>Auto-prefixing for browsers</List.Item>\n                </List>\n                <Heading>Library Maintenance</Heading>\n                <List>\n                    <List.Item>Popular - 1m/week downloads</List.Item>\n                    <List.Item>\n                        Maintained - very responsive to issues/PR on github\n                    </List.Item>\n                </List>\n                <Square />\n            </Page>\n        </Themed>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}